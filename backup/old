#!/usr/bin/perl -w
# COMP1511 17s2 -- Stylomatic, the All-New Wonder Style Checker!
#
# Blame
#     Alex Linker <a.linker@unsw.edu.au>
#     Jashank Jeremy <jashankj@cse.unsw.edu.au>

# TODO: count comments
# TODO: check no spaces before semicolons

use strict;
use warnings;
use feature qw(say);

my $fail_flag = 0;

FILE:
foreach my $file_name (@ARGV) {
	say "$file_name:" if $#ARGV;
     unless ($file_name =~ /^.*\.c$/) {
         say "skipping: not a `.c` file.";
         $fail_flag = 1;
         next FILE;
    }
    my $fh;
    unless (open($fh, "<", $file_name)) {
		say "Can't open: $!";
		$fail_flag = 1;
		next FILE;
	}
	
	my @lines = <$fh>;
	close($fh);
	
    my $zid_flag = 0;
	my $header_flag = 0;
	my $space_flag = 1;
	my $line_num = 0;
	my $bracket_flag = 0;
	my $bracket_comma_flag = 0;
	my $para_flag = 0;
	my $indent_level = 0;
	my $main_flag = 0;
	my $ret_flag = 0;
	
	while (my $line = shift @lines) {
		$line_num++;
		unless ($line =~ /^\s*\/\//) {
			last;
		}
		$header_flag = 1;
		$zid_flag = 1 if ($line =~ /z\d{7}/);
	}

	my $header_size = --$line_num;
	foreach my $line (@lines) {
		$line_num++;

		# checking indentation
		my $space = good_spacing($line);
		if ($space == 0) {
			print "Check your indentation around line $line_num.  ".
				"Make sure to use four spaces ".
				"to indent at each level.\n";
			$fail_flag = 1;
			next FILE;
		}

	    if ($space == 2) {
	        print "Check your indentation around line $line_num.  ".
	            "Make sure to use spaces to ".
	            "indent rather than tabs.\n";
	        $fail_flag = 1;
			next FILE; 
	    }

        #check trailing whitespace
		if ($line =~ /[ \t]$/) {
		    print "WARNING: Check the end of the line near line $line_num.  ".
		        "You have extra spaces at the end.\n"
		        unless ($line =~ /^[ \t]*$/);
		}
		
		#right-trim lines
		$line =~ s/[ \t]+$//;

		# skip empty lines
		next if (good_spacing($line) == 3);
		
		# check main
		if ($line =~ m/^\s*int\s+main\s*\(/) {
			$main_flag = 1 unless ($line =~ /\(int argc, char \*argv\[\]\)/);
		}

		#check EXIT_SUCCESS
		$ret_flag = 1 if ($line =~ /return\s+EXIT_SUCCESS/);

		if ($space_flag) {
			$space_flag = $space;
		}

		if ($line =~ /^\s*if[^{]*$/) {
			print "Your if statement on line $line_num ".
				"doesn't have a bracket.  ".
				"The '{' should be on the same line ".
				"as the if statement.\n";
			$bracket_flag = 1;
		}

		if ($line =~ /\( | \)/) {
			print "Check the spacing next to the parentheses ".
				"on line $line_num.\n";
			$para_flag = 1;
		}

		if ($line =~ /\)\s*{(?!(\s*)(\/{2,}|\/\*|[\r\n]+))/) {
			print "Only comments are allowed after '{' ".
				"on line $line_num.\n";
			$bracket_comma_flag = 1;
		}
		
		
		#check disallowed syntax
		if($line =~ /\bfor\b\s*\(/) {
		    say "You cannot use for loops until they have been ".
		    "taught in lectures.";
		    $fail_flag = 1;
		}
		
		if($line =~ /\bswitch\b/) {
		    say "You cannot use switch statements.";
		    $fail_flag = 1;
		}
		
		if($line =~ /\bgoto\b/) {
		    say "You cannot use goto statements.";
		    $fail_flag = 1;
		}
		
		if($line =~ /#include\s*<string\.h>/) {
		    say "You cannot use the string.h library.";
		    $fail_flag = 1;
		}
		
		#check unhugged else
		if($line =~ /^\s*else/) {
		    say "Your else statement near line $line_num ".
		    "needs to be on the same line as the }";
		    $fail_flag = 1;
		}
	}

	#check identation levels

	if ($space_flag) {
		my $prev = "";
		my $line_count = $header_size+1;
		foreach my $line (@lines) {
			next if ($line =~ /^\s*$/);
			my $in = count_indent($line);
			my $check = count_indent($prev);

			$check++ if ($prev =~ /{\s*(\/\/.*)?$/);
			$check-- if ($line =~ /^\s*}/);
			if ($in != $check) {
				printf 'Indentation is wrong on line %d.  '.
					'Expected %d, found %d.',
					($line_count + $header_size),
					$check, $in;
				print "\n";
				$fail_flag = 1;
				next FILE;
			}
			$prev = $line;
			$line_count++;
		}
	}

	say "You haven't included a header comment."
		unless $header_flag;

	say "You need to include your zid in your header comments."
		unless $zid_flag;

	say "You haven't used `int main(int argc, char *argv[])`."
		if $main_flag;

	say "You haven't used `return EXIT_SUCCESS`."
		unless $ret_flag;

	if (not $header_flag or
		not $zid_flag or
		not $space_flag or
		    $bracket_flag or
			$bracket_comma_flag or
		    $para_flag or
		    $main_flag or
		not $ret_flag or
		    $fail_flag) {
		$fail_flag = 1;
	} else {
		say "Looks good!";
	}
	
}

exit($fail_flag);

sub good_spacing {
	my $line = shift(@_);

    return 2 if ($line =~ /\t/);	# tabs
	return 1 if ($line =~ /^[^\s]/);	# starts with words
	return 1 if ($line =~ /^( {4})*[^ ]/);	# multiple of four


	return 0;
}

sub count_indent {
	my $line = shift(@_);
	my $count = 0;

	return 0 if ($line =~ /^[^\s]/);	# starts with words

	#else, spaces
	$count++ while ($line =~ s/^ {4}//g);
	return $count;
}